[{"uri":"https://labbots.github.io/bash-utility/","title":"Bash Utility","tags":[],"description":"","content":"Bash library which provides utility functions and helpers for functional programming in Bash.\nBash-utility makes Bash programming bit easier by taking the hassle out of working with arrays, numbers, files, strings, etc. Bash-utility provides a whole lot of useful helper functions that are great for:\n Command line user interaction Basic condition checks Simple methods to manipulate dates Handling arrays Working with variables  "},{"uri":"https://labbots.github.io/bash-utility/basics/","title":"Basics","tags":[],"description":"","content":"Basics Following section provides a detailed usage on how this library function can be installed and used within your project.\n Installation   Usage   "},{"uri":"https://labbots.github.io/bash-utility/functions/","title":"Functions","tags":[],"description":"","content":"Function Documenation  Array   Check   Collection   Date   File   Format   Interaction   Json   Miscellaneous   String   Terminal   Variable   "},{"uri":"https://labbots.github.io/bash-utility/functions/array/","title":"Array","tags":[],"description":"Functions for array operations and manipulations.","content":"Functions for array operations and manipulations.\nTable of Contents  array::contains() array::dedupe() array::is_empty() array::join() array::reverse() array::random_element() array::sort() array::rsort() array::bsort() array::merge()   array::contains() Check if item exists in the given array.\nArguments  $1 (mixed): Item to search (needle). $2 (array): array to be searched (haystack).  Exit codes  0: If successful. 1: If no match found in the array. 2: Function missing arguments.  Example array=(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) array::contains \u0026#34;c\u0026#34; ${array[@]} #Output 0  array::dedupe() Remove duplicate items from the array.\nArguments  $1 (array): Array to be deduped.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  Deduplicated array.  Example array=(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;a\u0026#34; \u0026#34;c\u0026#34;) printf \u0026#34;%s\u0026#34; \u0026#34;$(array::dedupe ${array[@]})\u0026#34; #Output a b c  array::is_empty() Check if a given array is empty.\nArguments  $1 (array): Array to be checked.  Exit codes  0: If the given array is empty. 2: If the given array is not empty.  Example array=(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; \u0026#34;d\u0026#34;) array::is_empty \u0026#34;${array[@]}\u0026#34;  array::join() Join array elements with a string.\nArguments  $1 (string): String to join the array elements (glue). $2 (array): array to be joined with glue string.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  String containing a string representation of all the array elements in the same order,with the glue string between each element.  Example array=(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; \u0026#34;d\u0026#34;) printf \u0026#34;%s\u0026#34; \u0026#34;$(array::join \u0026#34;,\u0026#34; \u0026#34;${array[@]}\u0026#34;)\u0026#34; #Output a,b,c,d printf \u0026#34;%s\u0026#34; \u0026#34;$(array::join \u0026#34;\u0026#34; \u0026#34;${array[@]}\u0026#34;)\u0026#34; #Output abcd  array::reverse() Return an array with elements in reverse order.\nArguments  $1 (array): The input array.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  The reversed array.  Example array=(1 2 3 4 5) printf \u0026#34;%s\u0026#34; \u0026#34;$(array::reverse \u0026#34;${array[@]}\u0026#34;)\u0026#34; #Output 5 4 3 2 1  array::random_element() Returns a random item from the array.\nArguments  $1 (array): The input array.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  Random item out of the array.  Example array=(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; \u0026#34;d\u0026#34;) printf \u0026#34;%s\\n\u0026#34; \u0026#34;$(array::random_element \u0026#34;${array[@]}\u0026#34;)\u0026#34; #Output c  array::sort() Sort an array from lowest to highest.\nArguments  $1 (array): The input array.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  sorted array.  Example sarr=(\u0026#34;a c\u0026#34; \u0026#34;a\u0026#34; \u0026#34;d\u0026#34; 2 1 \u0026#34;4 5\u0026#34;) array::array_sort \u0026#34;${sarr[@]}\u0026#34; #Output 1 2 4 5 a a c d  array::rsort() Sort an array in reverse order (highest to lowest).\nArguments  $1 (array): The input array.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  reverse sorted array.  Example sarr=(\u0026#34;a c\u0026#34; \u0026#34;a\u0026#34; \u0026#34;d\u0026#34; 2 1 \u0026#34;4 5\u0026#34;) array::array_sort \u0026#34;${sarr[@]}\u0026#34; #Output d a c a 4 5 2 1  array::bsort() Bubble sort an integer array from lowest to highest. This sort does not work on string array.\nArguments  $1 (array): The input array.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  bubble sorted array.  Example iarr=(4 5 1 3) array::bsort \u0026#34;${iarr[@]}\u0026#34; #Output 1 3 4 5  array::merge() Merge two arrays. Pass the variable name of the array instead of value of the variable.\nArguments  $1 (string): variable name of first array. $2 (string): variable name of second array.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  Merged array.  Example a=(\u0026#34;a\u0026#34; \u0026#34;c\u0026#34;) b=(\u0026#34;d\u0026#34; \u0026#34;c\u0026#34;) array::merge \u0026#34;a[@]\u0026#34; \u0026#34;b[@]\u0026#34; #Output a c d c  "},{"uri":"https://labbots.github.io/bash-utility/functions/check/","title":"Check","tags":[],"description":"Helper functions.","content":"Helper functions.\nTable of Contents  check::command_exists() check::is_sudo()   check::command_exists() Check if the command exists in the system.\nArguments  $1 (string): Command name to be searched.  Exit codes  0: If the command exists. 1: If the command does not exist. 2: Function missing arguments.  Example check::command_exists \u0026#34;tput\u0026#34;  check::is_sudo() Check if the script is executed with sudo privilege.\nFunction has no arguments.\nExit codes  0: If the script is executed with root privilege. 1: If the script is not executed with root privilege  Example check::is_sudo  "},{"uri":"https://labbots.github.io/bash-utility/functions/collection/","title":"Collection","tags":[],"description":"(Experimental) Functions to iterates over a list of elements, yielding each in turn to an iteratee function.","content":"(Experimental) Functions to iterates over a list of elements, yielding each in turn to an iteratee function.\nTable of Contents  collection::each() collection::every() collection::filter() collection::find() collection::invoke() collection::map() collection::reject() collection::some()   collection::each() Iterates over elements of collection and invokes iteratee for each element. Input to the function can be a pipe output, here-string or file.\nArguments  $1 (string): Iteratee function.  Exit codes  0: If successful. 2: Function missing arguments. other exitcode returned by iteratee.  Output on stdout  Output of iteratee function.  Example test_func(){ printf \u0026#34;print value: %s\\n\u0026#34; \u0026#34;$1\u0026#34; return 0 } arr1=(\u0026#34;a b\u0026#34; \u0026#34;c d\u0026#34; \u0026#34;a\u0026#34; \u0026#34;d\u0026#34;) printf \u0026#34;%s\\n\u0026#34; \u0026#34;${arr1[@]}\u0026#34; | collection::each \u0026#34;test_func\u0026#34; collection::each \u0026#34;test_func\u0026#34; \u0026lt; \u0026lt;(printf \u0026#34;%s\\n\u0026#34; \u0026#34;${arr1[@]}\u0026#34;) #alternative approach #output print value: a b print value: c d print value: a print value: d Example # If other function from this library is already used to process the array. # Then following method could be used to pass the array to the function. out=(\u0026#34;$(array::dedupe \u0026#34;${arr1[@]}\u0026#34;)\u0026#34;) collection::each \u0026#34;test_func\u0026#34; \u0026lt;\u0026lt;\u0026lt; \u0026#34;${out[@]}\u0026#34;  collection::every() Checks if iteratee function returns truthy for all elements of collection. Iteration is stopped once predicate returns false. Input to the function can be a pipe output, here-string or file.\nArguments  $1 (string): Iteratee function.  Exit codes  0: If successful. 1: If iteratee function fails. 2: Function missing arguments.  Example arri=(\u0026#34;1\u0026#34; \u0026#34;2\u0026#34; \u0026#34;3\u0026#34; \u0026#34;4\u0026#34;) printf \u0026#34;%s\\n\u0026#34; \u0026#34;${arri[@]}\u0026#34; | collection::every \u0026#34;variable::is_numeric\u0026#34;  collection::filter() Iterates over elements of array, returning all elements where iteratee returns true. Input to the function can be a pipe output, here-string or file.\nArguments  $1 (string): Iteratee function.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  array values matching the iteratee function.  Example arri=(\u0026#34;1\u0026#34; \u0026#34;2\u0026#34; \u0026#34;3\u0026#34; \u0026#34;a\u0026#34;) printf \u0026#34;%s\\n\u0026#34; \u0026#34;${arri[@]}\u0026#34; | collection::filter \u0026#34;variable::is_numeric\u0026#34; #output 1 2 3  collection::find() Iterates over elements of collection, returning the first element where iteratee returns true. Input to the function can be a pipe output, here-string or file.\nArguments  $1 (string): Iteratee function.  Exit codes  0: If successful. 1: If no match found. 2: Function missing arguments.  Output on stdout  first array value matching the iteratee function.  Example arr=(\u0026#34;1\u0026#34; \u0026#34;2\u0026#34; \u0026#34;3\u0026#34; \u0026#34;a\u0026#34;) check_a(){ [[ \u0026#34;$1\u0026#34; = \u0026#34;a\u0026#34; ]] } printf \u0026#34;%s\\n\u0026#34; \u0026#34;${arr[@]}\u0026#34; | collection::find \u0026#34;check_a\u0026#34; #Output a  collection::invoke() Invokes the iteratee with each element passed as argument to the iteratee. Input to the function can be a pipe output, here-string or file.\nArguments  $1 (string): Iteratee function.  Exit codes  0: If successful. 2: Function missing arguments. other exitcode returned by iteratee.  Output on stdout  Output from the iteratee function.  Example opt=(\u0026#34;-a\u0026#34; \u0026#34;-l\u0026#34;) printf \u0026#34;%s\\n\u0026#34; \u0026#34;${opt[@]}\u0026#34; | collection::invoke \u0026#34;ls\u0026#34;  collection::map() Creates an array of values by running each element in array through iteratee. Input to the function can be a pipe output, here-string or file.\nArguments  $1 (string): Iteratee function.  Exit codes  0: If successful. 2: Function missing arguments. other exitcode returned by iteratee.  Output on stdout  Output result of iteratee on value.  Example arri=(\u0026#34;1\u0026#34; \u0026#34;2\u0026#34; \u0026#34;3\u0026#34;) add_one(){ i=${1} i=$(( i + 1 )) printf \u0026#34;%s\\n\u0026#34; \u0026#34;$i\u0026#34; } printf \u0026#34;%s\\n\u0026#34; \u0026#34;${arri[@]}\u0026#34; | collection::map \u0026#34;add_one\u0026#34;  collection::reject() The opposite of filter function; this method returns the elements of collection that iteratee does not return true. Input to the function can be a pipe output, here-string or file.\nArguments  $1 (string): Iteratee function.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  array values not matching the iteratee function.  Example arri=(\u0026#34;1\u0026#34; \u0026#34;2\u0026#34; \u0026#34;3\u0026#34; \u0026#34;a\u0026#34;) printf \u0026#34;%s\\n\u0026#34; \u0026#34;${arri[@]}\u0026#34; | collection::reject \u0026#34;variable::is_numeric\u0026#34; #Ouput a See also  collection::filter   collection::some() Checks if iteratee returns true for any element of the array. Input to the function can be a pipe output, here-string or file.\nArguments  $1 (string): Iteratee function.  Exit codes  0: If match successful. 1: If no match found. 2: Function missing arguments.  Example arr=(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;3\u0026#34; \u0026#34;a\u0026#34;) printf \u0026#34;%s\\n\u0026#34; \u0026#34;${arr[@]}\u0026#34; | collection::reject \u0026#34;variable::is_numeric\u0026#34;  "},{"uri":"https://labbots.github.io/bash-utility/functions/date/","title":"Date","tags":[],"description":"Functions for manipulating dates.","content":"Functions for manipulating dates.\nTable of Contents  date::now() date::epoc() date::add_days_from() date::add_months_from() date::add_years_from() date::add_weeks_from() date::add_hours_from() date::add_minutes_from() date::add_seconds_from() date::add_days() date::add_months() date::add_years() date::add_weeks() date::add_hours() date::add_minutes() date::add_seconds() date::sub_days_from() date::sub_months_from() date::sub_years_from() date::sub_weeks_from() date::sub_hours_from() date::sub_minutes_from() date::sub_seconds_from() date::sub_days() date::sub_months() date::sub_years() date::sub_weeks() date::sub_hours() date::sub_minutes() date::sub_seconds() date::format()   date::now() Get current time in unix timestamp.\nFunction has no arguments.\nExit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  current timestamp.  Example echo \u0026#34;$(date::now)\u0026#34; #Output 1591554426  date::epoc() convert datetime string to unix timestamp.\nArguments  $1 (string): date time in any format.  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp for specified datetime.  Example echo \u0026#34;$(date::epoc \u0026#34;2020-07-07 18:38\u0026#34;)\u0026#34; #Output 1594143480  date::add_days_from() Add number of days from specified timestamp. If number of days not specified then it defaults to 1 day.\nArguments  $1 (int): unix timestamp. $2 (int): number of days (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_days_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1594229880  date::add_months_from() Add number of months from specified timestamp. If number of months not specified then it defaults to 1 month.\nArguments  $1 (int): unix timestamp. $2 (int): number of months (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_months_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1596821880  date::add_years_from() Add number of years from specified timestamp. If number of years not specified then it defaults to 1 year.\nArguments  $1 (int): unix timestamp. $2 (int): number of years (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_years_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1625679480  date::add_weeks_from() Add number of weeks from specified timestamp. If number of weeks not specified then it defaults to 1 week.\nArguments  $1 (int): unix timestamp. $2 (int): number of weeks (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_weeks_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1594748280  date::add_hours_from() Add number of hours from specified timestamp. If number of hours not specified then it defaults to 1 hour.\nArguments  $1 (int): unix timestamp. $2 (int): number of hours (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_hours_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1594147080  date::add_minutes_from() Add number of minutes from specified timestamp. If number of minutes not specified then it defaults to 1 minute.\nArguments  $1 (int): unix timestamp. $2 (int): number of minutes (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_minutes_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1594143540  date::add_seconds_from() Add number of seconds from specified timestamp. If number of seconds not specified then it defaults to 1 second.\nArguments  $1 (int): unix timestamp. $2 (int): number of seconds (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_seconds_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1594143481  date::add_days() Add number of days from current day timestamp. If number of days not specified then it defaults to 1 day.\nArguments  $1 (int): number of days (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_days \u0026#34;1\u0026#34;)\u0026#34; #Output 1591640826  date::add_months() Add number of months from current day timestamp. If number of months not specified then it defaults to 1 month.\nArguments  $1 (int): number of months (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_months \u0026#34;1\u0026#34;)\u0026#34; #Output 1594146426  date::add_years() Add number of years from current day timestamp. If number of years not specified then it defaults to 1 year.\nArguments  $1 (int): number of years (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_years \u0026#34;1\u0026#34;)\u0026#34; #Output 1623090426  date::add_weeks() Add number of weeks from current day timestamp. If number of weeks not specified then it defaults to 1 year.\nArguments  $1 (int): number of weeks (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_weeks \u0026#34;1\u0026#34;)\u0026#34; #Output 1592159226  date::add_hours() Add number of hours from current day timestamp. If number of hours not specified then it defaults to 1 hour.\nArguments  $1 (int): number of hours (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_hours \u0026#34;1\u0026#34;)\u0026#34; #Output 1591558026  date::add_minutes() Add number of minutes from current day timestamp. If number of minutes not specified then it defaults to 1 minute.\nArguments  $2 (int): number of minutes (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_minutes \u0026#34;1\u0026#34;)\u0026#34; #Output 1591554486  date::add_seconds() Add number of seconds from current day timestamp. If number of seconds not specified then it defaults to 1 second.\nArguments  $2 (int): number of seconds (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::add_seconds \u0026#34;1\u0026#34;)\u0026#34; #Output 1591554427  date::sub_days_from() Subtract number of days from specified timestamp. If number of days not specified then it defaults to 1 day.\nArguments  $1 (int): unix timestamp. $2 (int): number of days (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_days_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1594057080  date::sub_months_from() Subtract number of months from specified timestamp. If number of months not specified then it defaults to 1 month.\nArguments  $1 (int): unix timestamp. $2 (int): number of months (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_months_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1591551480  date::sub_years_from() Subtract number of years from specified timestamp. If number of years not specified then it defaults to 1 year.\nArguments  $1 (int): unix timestamp. $2 (int): number of years (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_years_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1562521080  date::sub_weeks_from() Subtract number of weeks from specified timestamp. If number of weeks not specified then it defaults to 1 week.\nArguments  $1 (int): unix timestamp. $2 (int): number of weeks (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_weeks_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1593538680  date::sub_hours_from() Subtract number of hours from specified timestamp. If number of hours not specified then it defaults to 1 hour.\nArguments  $1 (int): unix timestamp. $2 (int): number of hours (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_hours_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1594139880  date::sub_minutes_from() Subtract number of minutes from specified timestamp. If number of minutes not specified then it defaults to 1 minute.\nArguments  $1 (int): unix timestamp. $2 (int): number of minutes (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_minutes_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1594143420  date::sub_seconds_from() Subtract number of seconds from specified timestamp. If number of seconds not specified then it defaults to 1 second.\nArguments  $1 (int): unix timestamp. $2 (int): number of seconds (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp. 2: Function missing arguments.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_seconds_from \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 1594143479  date::sub_days() Subtract number of days from current day timestamp. If number of days not specified then it defaults to 1 day.\nArguments  $1 (int): number of days (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_days \u0026#34;1\u0026#34;)\u0026#34; #Output 1588876026  date::sub_months() Subtract number of months from current day timestamp. If number of months not specified then it defaults to 1 month.\nArguments  $1 (int): number of months (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_months \u0026#34;1\u0026#34;)\u0026#34; #Output 1559932026  date::sub_years() Subtract number of years from current day timestamp. If number of years not specified then it defaults to 1 year.\nArguments  $1 (int): number of years (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_years \u0026#34;1\u0026#34;)\u0026#34; #Output 1591468026  date::sub_weeks() Subtract number of weeks from current day timestamp. If number of weeks not specified then it defaults to 1 week.\nArguments  $1 (int): number of weeks (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_weeks \u0026#34;1\u0026#34;)\u0026#34; #Output 1590949626  date::sub_hours() Subtract number of hours from current day timestamp. If number of hours not specified then it defaults to 1 hour.\nArguments  $1 (int): number of hours (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_hours \u0026#34;1\u0026#34;)\u0026#34; #Output 1591550826  date::sub_minutes() Subtract number of minutes from current day timestamp. If number of minutes not specified then it defaults to 1 minute.\nArguments  $1 (int): number of minutes (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_minutes \u0026#34;1\u0026#34;)\u0026#34; #Output 1591554366  date::sub_seconds() Subtract number of seconds from current day timestamp. If number of seconds not specified then it defaults to 1 second.\nArguments  $1 (int): number of seconds (optional).  Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  timestamp.  Example echo \u0026#34;$(date::sub_seconds \u0026#34;1\u0026#34;)\u0026#34; #Output 1591554425  date::format() Format unix timestamp to human readable format. If format string is not specified then it defaults to \u0026ldquo;yyyy-mm-dd hh:mm:ss\u0026rdquo; format.\nArguments  $1 (int): unix timestamp. $2 (string): format control characters based on date command (optional).  Exit codes  0: If successful. 1: If unable to generate time string. 2: Function missing arguments.  Output on stdout  formatted time string.  Example echo echo \u0026#34;$(date::format \u0026#34;1594143480\u0026#34;)\u0026#34; #Output 2020-07-07 18:38:00  "},{"uri":"https://labbots.github.io/bash-utility/functions/file/","title":"File","tags":[],"description":"Functions for handling files.","content":"Functions for handling files.\nTable of Contents  file::make_temp_file() file::name() file::basename() file::extension() file::dirname() file::full_path() file::mime_type()   file::make_temp_file() Create temporary file. Function creates temporary file with random name. The temporary file will be deleted when script finishes.\nFunction has no arguments.\nExit codes  0: If successful. 1: If failed to create temp file.  Output on stdout  file name of temporary file created.  Example echo \u0026#34;$(file::make_temp_file)\u0026#34; #Output tmp.vgftzy  file::name() Get only the filename from string path.\nArguments  $1 (string): path.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  name of the file with extension.  Example echo \u0026#34;$(file::name \u0026#34;/path/to/test.md\u0026#34;)\u0026#34; #Output test.md  file::basename() Get the basename of file from file name.\nArguments  $1 (string): path.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  basename of the file.  Example echo \u0026#34;$(file::basename \u0026#34;/path/to/test.md\u0026#34;)\u0026#34; #Output test  file::extension() Get the extension of file from file name.\nArguments  $1 (string): path.  Exit codes  0: If successful. 1: If no extension is found in the filename. 2: Function missing arguments.  Output on stdout  extension of the file.  Example echo \u0026#34;$(file::extension \u0026#34;/path/to/test.md\u0026#34;)\u0026#34; #Output md  file::dirname() Get directory name from file path.\nArguments  $1 (string): path.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  directory path.  Example echo \u0026#34;$(file::dirname \u0026#34;/path/to/test.md\u0026#34;)\u0026#34; #Output /path/to  file::full_path() Get absolute path of file or directory.\nArguments  $1 (string): relative or absolute path to file/direcotry.  Exit codes  0: If successful. 1: If file/directory does not exist. 2: Function missing arguments.  Output on stdout  Absolute path to file/directory.  Example file::full_path \u0026#34;../path/to/file.md\u0026#34; #Output /home/labbots/docs/path/to/file.md  file::mime_type() Get mime type of provided input.\nArguments  $1 (string): relative or absolute path to file/direcotry.  Exit codes  0: If successful. 1: If file/directory does not exist. 2: Function missing arguments. 3: If file or mimetype command not found in system.  Output on stdout  mime type of file/directory.  Example file::mime_type \u0026#34;../src/file.sh\u0026#34; #Output application/x-shellscript  "},{"uri":"https://labbots.github.io/bash-utility/functions/format/","title":"Format","tags":[],"description":"Functions to format provided input.","content":"Functions to format provided input.\nTable of Contents  format::human_readable_seconds() format::bytes_to_human()   format::human_readable_seconds() Format seconds to human readable format.\nArguments  $1 (int): number of seconds.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  formatted time string.  Example echo \u0026#34;$(format::human_readable_seconds \u0026#34;356786\u0026#34;)\u0026#34; #Output 4 days 3 hours 6 minute(s) and 26 seconds  format::bytes_to_human() Format bytes to human readable format.\nArguments  $1 (int): size in bytes.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  formatted file size string.  Example echo \u0026#34;$(format::bytes_to_human \u0026#34;2250\u0026#34;)\u0026#34; #Output 2.19 KB  "},{"uri":"https://labbots.github.io/bash-utility/functions/interaction/","title":"Interaction","tags":[],"description":"Functions to enable interaction with the user.","content":"Functions to enable interaction with the user.\nTable of Contents  interaction::prompt_yes_no() interaction::prompt_response()   interaction::prompt_yes_no() Prompt yes or no question to the user.\nArguments  $1 (string): The question to be prompted to the user. $2 (string): default answer [yes/no] (optional).  Exit codes  0: If user responds with yes. 1: If user responds with no. 2: Function missing arguments.  Output on stdout  question to be prompted to the user.  Example interaction::prompt_yes_no \u0026#34;Are you sure to proceed\u0026#34; \u0026#34;yes\u0026#34; #Output Are you sure to proceed (y/n)? [y]  interaction::prompt_response() Prompt question to the user.\nArguments  $1 (string): The question to be prompted to the user. $2 (string): default answer (optional).  Exit codes  0: If user responds with answer. 2: Function missing arguments.  Output on stdout  question to be prompted to the user.  Example interaction::prompt_response \u0026#34;Choose directory to install\u0026#34; \u0026#34;/home/path\u0026#34; #Output Choose directory to install? [/home/path]  "},{"uri":"https://labbots.github.io/bash-utility/functions/json/","title":"Json","tags":[],"description":"Simple json manipulation. These functions does not completely replace `jq` in any way.","content":"Simple json manipulation. These functions does not completely replace jq in any way.\nTable of Contents  json::get_value()   json::get_value() Extract value from json based on key and position. Input to the function can be a pipe output, here-string or file.\nArguments  $1 (string): id of the field to fetch. $2 (int): position of value to extract.Defaults to 1.(optional)  Exit codes  0: If match successful. 2: Function missing arguments.  Output on stdout  string value of extracted key.  Example json::get_value \u0026#34;id\u0026#34; \u0026#34;1\u0026#34; \u0026lt; json_file json::get_value \u0026#34;id\u0026#34; \u0026lt;\u0026lt;\u0026lt; \u0026#34;${json_var}\u0026#34; echo \u0026#34;{\\\u0026#34;data\\\u0026#34;:{\\\u0026#34;id\\\u0026#34;:\\\u0026#34;123\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:\\\u0026#34;name string\\\u0026#34;}}\u0026#34; | json::get_value \u0026#34;id\u0026#34;  "},{"uri":"https://labbots.github.io/bash-utility/functions/misc/","title":"Miscellaneous","tags":[],"description":"Set of miscellaneous helper functions.","content":"Set of miscellaneous helper functions.\nTable of Contents  misc::check_internet_connection() misc::get_pid() misc::get_uid() misc::generate_uuid()   misc::check_internet_connection() Check if internet connection is available.\nFunction has no arguments.\nExit codes  0: If script can connect to internet. 1: If script cannot access internet.  Example misc::check_internet_connection  misc::get_pid() Get list of process ids based on process name.\nArguments  $1 (Name): of the process to search.  Exit codes  0: If match successful. 2: Function missing arguments.  Output on stdout  list of process ids.  Example misc::get_pid \u0026#34;chrome\u0026#34; #Ouput 25951 26043 26528 26561  misc::get_uid() Get user id based on username.\nArguments  $1 (username): to search.  Exit codes  0: If match successful. 2: Function missing arguments.  Output on stdout  string uid for the username.  Example misc::get_uid \u0026#34;labbots\u0026#34; #Ouput 1000  misc::generate_uuid() Generate random uuid.\nFunction has no arguments.\nExit codes  0: If match successful.  Output on stdout  random generated uuid.  Example misc::generate_uuid #Ouput 65bc64d1-d355-4ffc-a9d9-dc4f3954c34c  "},{"uri":"https://labbots.github.io/bash-utility/functions/string/","title":"String","tags":[],"description":"Functions for string operations and manipulations.","content":"Functions for string operations and manipulations.\nTable of Contents  string::trim() string::split() string::lstrip() string::rstrip() string::to_lower() string::to_upper() string::contains() string::starts_with() string::ends_with() string::regex()   string::trim() Strip whitespace from the beginning and end of a string.\nArguments  $1 (string): The string to be trimmed.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  The trimmed string.  Example echo \u0026#34;$(string::trim \u0026#34; Hello World! \u0026#34;)\u0026#34; #Output Hello World!  string::split() Split a string to array by a delimiter.\nArguments  $1 (string): The input string. $2 (string): The delimiter string.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  Returns an array of strings created by splitting the string parameter by the delimiter.  Example printf \u0026#34;%s\u0026#34; \u0026#34;$(string::split \u0026#34;Hello!World\u0026#34; \u0026#34;!\u0026#34;)\u0026#34; #Output Hello World  string::lstrip() Strip characters from the beginning of a string.\nArguments  $1 (string): The input string. $2 (string): The characters you want to strip.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  Returns the modified string.  Example echo \u0026#34;$(string::lstrip \u0026#34;Hello World!\u0026#34; \u0026#34;He\u0026#34;)\u0026#34; #Output llo World!  string::rstrip() Strip characters from the end of a string.\nArguments  $1 (string): The input string. $2 (string): The characters you want to strip.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  Returns the modified string.  Example echo \u0026#34;$(string::rstrip \u0026#34;Hello World!\u0026#34; \u0026#34;d!\u0026#34;)\u0026#34; #Output Hello Worl  string::to_lower() Make a string lowercase.\nArguments  $1 (string): The input string.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  Returns the lowercased string.  Example echo \u0026#34;$(string::to_lower \u0026#34;HellO\u0026#34;)\u0026#34; #Output hello  string::to_upper() Make a string all uppercase.\nArguments  $1 (string): The input string.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  Returns the uppercased string.  Example echo \u0026#34;$(string::to_upper \u0026#34;HellO\u0026#34;)\u0026#34; #Output HELLO  string::contains() Check whether the search string exists within the input string.\nArguments  $1 (string): The input string. $2 (string): The search key.  Exit codes  0: If match found. 1: If no match found. 2: Function missing arguments.  Example string::contains \u0026#34;Hello World!\u0026#34; \u0026#34;lo\u0026#34;  string::starts_with() Check whether the input string starts with key string.\nArguments  $1 (string): The input string. $2 (string): The search key.  Exit codes  0: If match found. 1: If no match found. 2: Function missing arguments.  Example string::starts_with \u0026#34;Hello World!\u0026#34; \u0026#34;He\u0026#34;  string::ends_with() Check whether the input string ends with key string.\nArguments  $1 (string): The input string. $2 (string): The search key.  Exit codes  0: If match found. 1: If no match found. 2: Function missing arguments.  Example string::ends_with \u0026#34;Hello World!\u0026#34; \u0026#34;d!\u0026#34;  string::regex() Check whether the input string matches the given regex.\nArguments  $1 (string): The input string. $2 (string): The search key.  Exit codes  0: If match found. 1: If no match found. 2: Function missing arguments.  Example string::regex \u0026#34;HELLO\u0026#34; \u0026#34;^[A-Z]*$\u0026#34;  "},{"uri":"https://labbots.github.io/bash-utility/functions/terminal/","title":"Terminal","tags":[],"description":"Set of useful terminal functions.","content":"Set of useful terminal functions.\nTable of Contents  terminal::is_term() terminal::detect_profile() terminal::clear_line()   terminal::is_term() Check if script is run in terminal.\nFunction has no arguments.\nExit codes  0: If script is run on terminal. 1: If script is not run on terminal.   terminal::detect_profile() Detect profile rc file for zsh and bash of current script running user.\nFunction has no arguments.\nExit codes  0: If script is run on terminal. 1: If script is not run on terminal.  Output on stdout  path to the profile file.   terminal::clear_line() Clear the output in terminal on the specified line number. This function clears line only on terminal.\nArguments  $1 (Line): number to clear. Defaults to 1. (optional)  Exit codes  0: If script is run on terminal.  Output on stdout  clear line ansi code.   "},{"uri":"https://labbots.github.io/bash-utility/functions/variable/","title":"Variable","tags":[],"description":"Functions for handling variables.","content":"Functions for handling variables.\nTable of Contents  variable::is_array() variable::is_numeric() variable::is_int() variable::is_float() variable::is_bool() variable::is_true() variable::is_false()   variable::is_array() Check if given variable is array. Pass the variable name instead of value of the variable.\nArguments  $1 (string): name of the variable to check.  Exit codes  0: If input is array. 1: If input is not an array.  Example arr=(\u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;) variable::is_array \u0026#34;arr\u0026#34; #Output 0  variable::is_numeric() Check if given variable is a number.\nArguments  $1 (mixed): Value of variable to check.  Exit codes  0: If input is number. 1: If input is not a number.  Example variable::is_numeric \u0026#34;1234\u0026#34; #Output 0  variable::is_int() Check if given variable is an integer.\nArguments  $1 (mixed): Value of variable to check.  Exit codes  0: If input is an integer. 1: If input is not an integer.  Example variable::is_int \u0026#34;+1234\u0026#34; #Output 0  variable::is_float() Check if given variable is a float.\nArguments  $1 (mixed): Value of variable to check.  Exit codes  0: If input is a float. 1: If input is not a float.  Example variable::is_float \u0026#34;+1234.0\u0026#34; #Output 0  variable::is_bool() Check if given variable is a boolean.\nArguments  $1 (mixed): Value of variable to check.  Exit codes  0: If input is a boolean. 1: If input is not a boolean.  Example variable::is_bool \u0026#34;true\u0026#34; #Output 0  variable::is_true() Check if given variable is a true.\nArguments  $1 (mixed): Value of variable to check.  Exit codes  0: If input is true. 1: If input is not true.  Example variable::is_true \u0026#34;true\u0026#34; #Output 0  variable::is_false() Check if given variable is false.\nArguments  $1 (mixed): Value of variable to check.  Exit codes  0: If input is false. 1: If input is not false.  Example variable::is_false \u0026#34;false\u0026#34; #Output 0  "},{"uri":"https://labbots.github.io/bash-utility/basics/installation/","title":"Installation","tags":[],"description":"","content":"The script can be installed and sourced using following methods.\nMethod 1 - Git Submodules If the library is used inside a git project then git submodules can be used to install the library to the project. Following command will initialize git submodule and download the library to ./vendor/bash-utility folder.\ngit submodule init git submodule add -b master https://github.com/labbots/bash-utility vendor/bash-utility To Update submodules to latest code execute the following command.\ngit submodule update --rebase --remote Method 2 - Git Clone If you don\u0026rsquo;t want to use git submodules, you can use git clone to download library and then move the files to desired location manually.\nThe below command will clone the repository to vendor/bash-utility folder in current working directory.\ngit clone https://github.com/labbots/bash-utility.git ./vendor/bash-utility Once the submodule is added or updated, make sure to commit changes to your repository.\ngit add . git commit -m \u0026#39;Added/updated bash-utility library.\u0026#39; Note: When cloning your repository, use --recurse-submodules flag to git clone command to install the git sub modules.\n"},{"uri":"https://labbots.github.io/bash-utility/basics/usage/","title":"Usage","tags":[],"description":"","content":"Bash utility functions can be used by simply sourcing the library script file to your own script. To access all the functions within the bash-utility library, you could import the main bash file as follows.\nsource \u0026#34;vendor/bash-utility/bash-utility.sh\u0026#34; You can also only use the necessary library functions within your script by only importing the required function files.\nsource \u0026#34;vendor/bash-utility/src/array.sh\u0026#34; "},{"uri":"https://labbots.github.io/bash-utility/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://labbots.github.io/bash-utility/tags/","title":"Tags","tags":[],"description":"","content":""}]