<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash Utility</title>
    <link>https://labbots.github.io/bash-utility/</link>
    <description>Recent content on Bash Utility</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jun 2020 13:04:06 +0100</lastBuildDate>
    
	<atom:link href="https://labbots.github.io/bash-utility/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Operating System</title>
      <link>https://labbots.github.io/bash-utility/functions/os/</link>
      <pubDate>Tue, 26 Jan 2021 12:34:48 +0000</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/os/</guid>
      <description>Functions to detect Operating system and version.
Table of Contents  os::detect_os() os::detect_linux_distro() os::detect_linux_version() os::detect_mac_version()   os::detect_os() Identify the OS the function is run on.
Function has no arguments.
Exit codes  0: If OS is successfully detected. 1: If unable to detect OS.  Output on stdout  Operating system name (linux, mac or windows).  Example os::detect_os #Output linux  os::detect_linux_distro() Identify the distribution flavour of linux.</description>
    </item>
    
    <item>
      <title>Debug</title>
      <link>https://labbots.github.io/bash-utility/functions/debug/</link>
      <pubDate>Mon, 22 Jun 2020 13:10:41 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/debug/</guid>
      <description>Functions to facilitate debugging scripts.
Table of Contents  debug::print_array() debug::print_ansi()   debug::print_array() Prints the content of array as key value pair for easier debugging. Pass the variable name of the array instead of value of the variable.
Arguments  $1 (string): variable name of the array.  Output on stdout  Formatted key value of array.  Example array=(foo bar baz) printf &amp;#34;Array\n&amp;#34; printarr &amp;#34;array&amp;#34; declare -A assoc_array assoc_array=([foo]=bar [baz]=foobar) printf &amp;#34;Assoc Array\n&amp;#34; printarr &amp;#34;assoc_array&amp;#34; #Output Array 0 = foo 1 = bar 2 = baz Assoc Array baz = foobar foo = bar  debug::print_ansi() Function to print ansi escape sequence as is.</description>
    </item>
    
    <item>
      <title>Validation</title>
      <link>https://labbots.github.io/bash-utility/functions/validation/</link>
      <pubDate>Sat, 20 Jun 2020 13:05:12 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/validation/</guid>
      <description>Functions to perform validation on given data.
Table of Contents  validation::email() validation::ipv4() validation::ipv6() validation::alpha() validation::alpha_num() validation::alpha_dash() validation::version_comparison()   validation::email() Validate whether a given input is a valid email address or not.
Arguments  $1 (string): input email address to validate.  Exit codes  0: If provided input is an email address. 1: If provided input is not an email address. 2: Function missing arguments.  Example test=&amp;#39;test@gmail.com&amp;#39; validation::email &amp;#34;${test}&amp;#34; echo $?</description>
    </item>
    
    <item>
      <title>Array</title>
      <link>https://labbots.github.io/bash-utility/functions/array/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/array/</guid>
      <description>Functions for array operations and manipulations.
Table of Contents  array::contains() array::dedupe() array::is_empty() array::join() array::reverse() array::random_element() array::sort() array::rsort() array::bsort() array::merge()   array::contains() Check if item exists in the given array.
Arguments  $1 (mixed): Item to search (needle). $2 (array): array to be searched (haystack).  Exit codes  0: If successful. 1: If no match found in the array. 2: Function missing arguments.  Example array=(&amp;#34;a&amp;#34; &amp;#34;b&amp;#34; &amp;#34;c&amp;#34;) array::contains &amp;#34;c&amp;#34; ${array[@]} #Output 0  array::dedupe() Remove duplicate items from the array.</description>
    </item>
    
    <item>
      <title>Check</title>
      <link>https://labbots.github.io/bash-utility/functions/check/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/check/</guid>
      <description>Helper functions.
Table of Contents  check::command_exists() check::is_sudo()   check::command_exists() Check if the command exists in the system.
Arguments  $1 (string): Command name to be searched.  Exit codes  0: If the command exists. 1: If the command does not exist. 2: Function missing arguments.  Example check::command_exists &amp;#34;tput&amp;#34;  check::is_sudo() Check if the script is executed with sudo privilege.
Function has no arguments.
Exit codes  0: If the script is executed with root privilege.</description>
    </item>
    
    <item>
      <title>Collection</title>
      <link>https://labbots.github.io/bash-utility/functions/collection/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/collection/</guid>
      <description>(Experimental) Functions to iterates over a list of elements, yielding each in turn to an iteratee function.
Table of Contents  collection::each() collection::every() collection::filter() collection::find() collection::invoke() collection::map() collection::reject() collection::some()   collection::each() Iterates over elements of collection and invokes iteratee for each element. Input to the function can be a pipe output, here-string or file.
Arguments  $1 (string): Iteratee function.  Exit codes  0: If successful. 2: Function missing arguments.</description>
    </item>
    
    <item>
      <title>Date</title>
      <link>https://labbots.github.io/bash-utility/functions/date/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/date/</guid>
      <description>Functions for manipulating dates.
Table of Contents  date::now() date::epoc() date::add_days_from() date::add_months_from() date::add_years_from() date::add_weeks_from() date::add_hours_from() date::add_minutes_from() date::add_seconds_from() date::add_days() date::add_months() date::add_years() date::add_weeks() date::add_hours() date::add_minutes() date::add_seconds() date::sub_days_from() date::sub_months_from() date::sub_years_from() date::sub_weeks_from() date::sub_hours_from() date::sub_minutes_from() date::sub_seconds_from() date::sub_days() date::sub_months() date::sub_years() date::sub_weeks() date::sub_hours() date::sub_minutes() date::sub_seconds() date::format()   date::now() Get current time in unix timestamp.
Function has no arguments.
Exit codes  0: If successful. 1: If unable to generate timestamp.  Output on stdout  current timestamp.</description>
    </item>
    
    <item>
      <title>File</title>
      <link>https://labbots.github.io/bash-utility/functions/file/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/file/</guid>
      <description>Functions for handling files.
Table of Contents  file::make_temp_file() file::name() file::basename() file::extension() file::dirname() file::full_path() file::mime_type() file::contains_text()   file::make_temp_file() Create temporary file. Function creates temporary file with random name. The temporary file will be deleted when script finishes.
Function has no arguments.
Exit codes  0: If successful. 1: If failed to create temp file.  Output on stdout  file name of temporary file created.  Example echo &amp;#34;$(file::make_temp_file)&amp;#34; #Output tmp.</description>
    </item>
    
    <item>
      <title>Format</title>
      <link>https://labbots.github.io/bash-utility/functions/format/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/format/</guid>
      <description>Functions to format provided input.
Table of Contents  format::human_readable_seconds() format::bytes_to_human() format::strip_ansi() format::text_center() format::report() format::trim_text_to_term()   format::human_readable_seconds() Format seconds to human readable format.
Arguments  $1 (int): number of seconds.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  formatted time string.  Example echo &amp;#34;$(format::human_readable_seconds &amp;#34;356786&amp;#34;)&amp;#34; #Output 4 days 3 hours 6 minute(s) and 26 seconds  format::bytes_to_human() Format bytes to human readable format.</description>
    </item>
    
    <item>
      <title>Interaction</title>
      <link>https://labbots.github.io/bash-utility/functions/interaction/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/interaction/</guid>
      <description>Functions to enable interaction with the user.
Table of Contents  interaction::prompt_yes_no() interaction::prompt_response()   interaction::prompt_yes_no() Prompt yes or no question to the user.
Arguments  $1 (string): The question to be prompted to the user. $2 (string): default answer [yes/no] (optional).  Exit codes  0: If user responds with yes. 1: If user responds with no. 2: Function missing arguments.  Example interaction::prompt_yes_no &amp;#34;Are you sure to proceed&amp;#34; &amp;#34;yes&amp;#34; #Output Are you sure to proceed (y/n)?</description>
    </item>
    
    <item>
      <title>Json</title>
      <link>https://labbots.github.io/bash-utility/functions/json/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/json/</guid>
      <description>Simple json manipulation. These functions does not completely replace jq in any way.
Table of Contents  json::get_value()   json::get_value() Extract value from json based on key and position. Input to the function can be a pipe output, here-string or file.
Arguments  $1 (string): id of the field to fetch. $2 (int): position of value to extract.Defaults to 1.(optional)  Exit codes  0: If match successful. 2: Function missing arguments.</description>
    </item>
    
    <item>
      <title>Miscellaneous</title>
      <link>https://labbots.github.io/bash-utility/functions/misc/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/misc/</guid>
      <description>Set of miscellaneous helper functions.
Table of Contents  misc::check_internet_connection() misc::get_pid() misc::get_uid() misc::generate_uuid()   misc::check_internet_connection() Check if internet connection is available.
Function has no arguments.
Exit codes  0: If script can connect to internet. 1: If script cannot access internet.  Example misc::check_internet_connection  misc::get_pid() Get list of process ids based on process name.
Arguments  $1 (Name): of the process to search.  Exit codes  0: If match successful.</description>
    </item>
    
    <item>
      <title>String</title>
      <link>https://labbots.github.io/bash-utility/functions/string/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/string/</guid>
      <description>Functions for string operations and manipulations.
Table of Contents  string::trim() string::split() string::lstrip() string::rstrip() string::to_lower() string::to_upper() string::contains() string::starts_with() string::ends_with() string::regex()   string::trim() Strip whitespace from the beginning and end of a string.
Arguments  $1 (string): The string to be trimmed.  Exit codes  0: If successful. 2: Function missing arguments.  Output on stdout  The trimmed string.  Example echo &amp;#34;$(string::trim &amp;#34; Hello World! &amp;#34;)&amp;#34; #Output Hello World!</description>
    </item>
    
    <item>
      <title>Terminal</title>
      <link>https://labbots.github.io/bash-utility/functions/terminal/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/terminal/</guid>
      <description>Set of useful terminal functions.
Table of Contents  terminal::is_term() terminal::detect_profile() terminal::clear_line()   terminal::is_term() Check if script is run in terminal.
Function has no arguments.
Exit codes  0: If script is run on terminal. 1: If script is not run on terminal.   terminal::detect_profile() Detect profile rc file for zsh and bash of current script running user.
Function has no arguments.
Exit codes  0: If script is run on terminal.</description>
    </item>
    
    <item>
      <title>Variable</title>
      <link>https://labbots.github.io/bash-utility/functions/variable/</link>
      <pubDate>Fri, 12 Jun 2020 01:11:01 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/functions/variable/</guid>
      <description>Functions for handling variables.
Table of Contents  variable::is_array() variable::is_numeric() variable::is_int() variable::is_float() variable::is_bool() variable::is_true() variable::is_false() variable::is_empty_or_null()   variable::is_array() Check if given variable is array. Pass the variable name instead of value of the variable.
Arguments  $1 (string): name of the variable to check.  Exit codes  0: If input is array. 1: If input is not an array.  Example arr=(&amp;#34;a&amp;#34; &amp;#34;b&amp;#34; &amp;#34;c&amp;#34;) variable::is_array &amp;#34;arr&amp;#34; #Output 0  variable::is_numeric() Check if given variable is a number.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://labbots.github.io/bash-utility/basics/installation/</link>
      <pubDate>Tue, 09 Jun 2020 23:36:37 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/basics/installation/</guid>
      <description>The script can be installed and sourced using following methods.
Method 1 - Git Submodules If the library is used inside a git project then git submodules can be used to install the library to the project. Following command will initialize git submodule and download the library to ./vendor/bash-utility folder.
git submodule init git submodule add -b master https://github.com/labbots/bash-utility vendor/bash-utility To Update submodules to latest code execute the following command.</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>https://labbots.github.io/bash-utility/basics/usage/</link>
      <pubDate>Tue, 09 Jun 2020 23:36:37 +0100</pubDate>
      
      <guid>https://labbots.github.io/bash-utility/basics/usage/</guid>
      <description>Bash utility functions can be used by simply sourcing the library script file to your own script. To access all the functions within the bash-utility library, you could import the main bash file as follows.
source &amp;#34;vendor/bash-utility/bash-utility.sh&amp;#34; You can also use only the necessary library functions within your script by only importing the required function files.
source &amp;#34;vendor/bash-utility/src/array.sh&amp;#34; </description>
    </item>
    
  </channel>
</rss>